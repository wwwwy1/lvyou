package cn.sxwl.lvyou.common.dao;


import cn.sxwl.lvyou.common.entity.User;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.Map;

@Component
public interface UserMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Sun Jan 20 13:02:47 GMT+08:00 2019
     */
    @Delete({
        "delete from user",
        "where uid = #{uid,jdbcType=INTEGER}"
    })
    int deleteByPrimaryKey(Integer uid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Sun Jan 20 13:02:47 GMT+08:00 2019
     */
    @Insert({
        "insert into user (uid, uname, ",
        "upassword, uaddress, ",
        "uemail, ucreatetime, ",
        "ubalance,uhead)",
        "values (#{uid,jdbcType=INTEGER}, #{uname,jdbcType=VARCHAR}, ",
        "#{upassword,jdbcType=VARCHAR}, #{uaddress,jdbcType=VARCHAR}, ",
        "#{uemail,jdbcType=VARCHAR}, #{ucreatetime,jdbcType=TIMESTAMP}, ",
        "#{ubalance,jdbcType=DECIMAL},#{uhead,jdbcType=VARCHAR})"
    })
    int insert(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Sun Jan 20 13:02:47 GMT+08:00 2019
     */
    @InsertProvider(type=UserSqlProvider.class, method="insertSelective")
    int insertSelective(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Sun Jan 20 13:02:47 GMT+08:00 2019
     */
    @Select({
        "select",
        "uid, uname, upassword, uaddress, uemail, ucreatetime, ubalance",
        "from user",
        "where uid = #{uid,jdbcType=INTEGER}"
    })
    @Results({
        @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
        @Result(column="uname", property="uname", jdbcType=JdbcType.VARCHAR),
        @Result(column="upassword", property="upassword", jdbcType=JdbcType.VARCHAR),
        @Result(column="uaddress", property="uaddress", jdbcType=JdbcType.VARCHAR),
        @Result(column="uemail", property="uemail", jdbcType=JdbcType.VARCHAR),
        @Result(column="ucreatetime", property="ucreatetime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="ubalance", property="ubalance", jdbcType=JdbcType.DECIMAL)
    })
    User selectByPrimaryKey(Integer uid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Sun Jan 20 13:02:47 GMT+08:00 2019
     */
    @UpdateProvider(type=UserSqlProvider.class, method="updateByPrimaryKeySelective")
    int updateByPrimaryKeySelective(User record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user
     *
     * @mbggenerated Sun Jan 20 13:02:47 GMT+08:00 2019
     */
    @Update({
        "update user",
        "set uname = #{uname,jdbcType=VARCHAR},",
          "upassword = #{upassword,jdbcType=VARCHAR},",
          "uaddress = #{uaddress,jdbcType=VARCHAR},",
          "uemail = #{uemail,jdbcType=VARCHAR},",
          "ucreatetime = #{ucreatetime,jdbcType=TIMESTAMP},",
          "ubalance = #{ubalance,jdbcType=DECIMAL}",
        "where uid = #{uid,jdbcType=INTEGER}"
    })
    int updateByPrimaryKey(User record);
    @Select("select * from user")
    @Results({
            @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="uname", property="uname", jdbcType=JdbcType.VARCHAR),
            @Result(column="upassword", property="upassword", jdbcType=JdbcType.VARCHAR),
            @Result(column="uaddress", property="uaddress", jdbcType=JdbcType.VARCHAR),
            @Result(column="uemail", property="uemail", jdbcType=JdbcType.VARCHAR),
            @Result(column="ucreatetime", property="ucreatetime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="ubalance", property="ubalance", jdbcType=JdbcType.DECIMAL)
    })
    List<User> selectAll();



    @Select({
            "select",
            "uid, uname, upassword, uaddress, uemail, ucreatetime, ubalance",
            "from user",
            "where uid = #{uid,jdbcType=INTEGER}"
    })
    @Results({
            @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="uname", property="uname", jdbcType=JdbcType.VARCHAR),
            @Result(column="upassword", property="upassword", jdbcType=JdbcType.VARCHAR),
            @Result(column="uaddress", property="uaddress", jdbcType=JdbcType.VARCHAR),
            @Result(column="uemail", property="uemail", jdbcType=JdbcType.VARCHAR),
            @Result(column="ucreatetime", property="ucreatetime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="ubalance", property="ubalance", jdbcType=JdbcType.DECIMAL),
            @Result(column = "uid",property = "orders",many = @Many(select = "cn.sxwl.lvyou.common.dao.OrdersMapper.selectByUid"))
    })
    User selectUserOrderByUid(Integer uid);


    @SelectProvider(type = UserSqlProvider.class,method ="testSelect" )
    List<Map<String,Object>> goTestSqlProvider(String tiaojian);



    @Select({
            "select",
            "uid, uname, upassword, uaddress, uemail, ucreatetime, ubalance",
            "from user",
            "where uname = #{uname,jdbcType=VARCHAR}"
    })
    @Results({
            @Result(column="uid", property="uid", jdbcType=JdbcType.INTEGER, id=true),
            @Result(column="uname", property="uname", jdbcType=JdbcType.VARCHAR),
            @Result(column="upassword", property="upassword", jdbcType=JdbcType.VARCHAR),
            @Result(column="uaddress", property="uaddress", jdbcType=JdbcType.VARCHAR),
            @Result(column="uemail", property="uemail", jdbcType=JdbcType.VARCHAR),
            @Result(column="ucreatetime", property="ucreatetime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="ubalance", property="ubalance", jdbcType=JdbcType.DECIMAL)
    })
    User selectByUsername(String uname);
}